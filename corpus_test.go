// Copyright 2017 Tom Thorogood. All rights reserved.
// Use of this source code is governed by a Modified
// BSD License that can be found in the LICENSE file.

package bindata

import (
	"bytes"
	"flag"
	"io/ioutil"
	"os"
	"path/filepath"
	"testing"
)

var (
	corpus    = flag.String("corpus", "", "the directory contained a corpus to test against")
	gencorpus = flag.Bool("gencorpus", false, "generate a corpus into the -corpus directory")
)

func TestCorpus(t *testing.T) {
	if *corpus == "" {
		t.Skip("skipping test as -corpus flag not provided")
	}

	files, err := testFiles()
	if err != nil {
		t.Fatal(err)
	}

	perms, mode := os.O_RDONLY, os.FileMode(0)
	if *gencorpus {
		perms, mode = os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0666

		if err := os.Mkdir(*corpus, 0777); err != nil && !os.IsExist(err) {
			t.Fatal(err)
		}

		t.Logf("generating corpus into %s", *corpus)
	}

	for _, test := range testCases {
		test := test
		t.Run(test.name, func(t *testing.T) {
			t.Parallel()

			o := &GenerateOptions{Package: "main"}
			test.opts(o)

			f, err := os.OpenFile(filepath.Join(*corpus, test.name+".go"), perms, mode)
			if err != nil {
				if os.IsNotExist(err) {
					t.Skipf("corpus does not contain test case %s", test.name)
					return
				}

				t.Fatal(err)
			}
			defer f.Close()

			if *gencorpus {
				if err = files.Generate(f, o); err != nil {
					t.Error(err)
				}

				return
			}

			var generated bytes.Buffer
			if err = files.Generate(&generated, o); err != nil {
				t.Fatal(err)
			}

			expect, err := ioutil.ReadAll(f)
			if err != nil {
				t.Fatal(err)
			}

			if bytes.Equal(expect, generated.Bytes()) {
				return
			}

			t.Fail()

			if diff, err := testDiff(string(expect), generated.String()); err != nil {
				t.Error(err)
			} else {
				t.Log(diff)
			}
		})
	}
}
